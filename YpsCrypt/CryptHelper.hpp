/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      CryptHelper.hpp                            ||
||     Author:    Autogenerated                              ||
||     Generated: 28.02.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _CryptHelper_hpp_
#define _CryptHelper_hpp_


using namespace System;
using namespace Stepflow;


namespace Yps
{

	ref class CryptBuffer;

	public ref class CryptKey
		: public IDisposable
	{
	private:

		IntPtr k;
		bool   d;
		void   dispose( bool disposing );
		CryptBuffer^ hdr;

	internal:

		CryptKey(const char* phrase);
		CryptKey(unsigned long long hashval);
		~CryptKey(void);
		void* ToPointer(void);
		bool Equals(String^ phrase);
		CryptBuffer^ currentHdr(void);
		CryptBuffer^ currentHdr(array<UInt24>^ set);
		CryptBuffer^ currentHdr(CryptBuffer^ set);
		
	public:

		virtual bool IsValid( void );
		property unsigned long long Hash {
			unsigned long long get(void);
		}
		bool Equals( CryptKey^ That ) {
			if ( That ) return this->Hash == That->Hash;
			else return false;
		}
		virtual bool Equals( Object^ unknown ) override {
			if ( unknown == nullptr ) return false;
			if ( unknown->GetType() == CryptKey::typeid ) {
				return this->Hash
				    == safe_cast<CryptKey^>( unknown )->Hash;
			} return false;
		}

		static bool operator ==( CryptKey^ This, CryptKey^ That ) {
			Object^ nulli = nullptr;
			if ( This->Equals( nulli ) ) return ( That->Equals( nulli ) ) ? true : false;
			if ( That->Equals( nulli ) ) return ( This->Equals( nulli ) ) ? true : false;
			return This->Hash == That->Hash;
		}

		static bool operator !=( CryptKey^ This, CryptKey^ That ) {
			return !(operator==(This, That));
		}

		String^ Encrypt( String^ string );
		String^ Decrypt( String^ crypts );

		bool VerifyPhrase( String^ phrase ) {
			return Equals( phrase );
		}
	};


	public value struct Error
	{
	private:
	
		int     code;
		String^ text;
	
	internal:
	
		Error( int eCode, const char* eText )
			: code(eCode)
			, text(gcnew String(eText)) {
		}
		Error( int eCode, const char* eText, unsigned ePosition )
			: code(eCode)
			, text(String::Format("{0} at position {1}",
				   gcnew String(eText), ePosition)) {
		}

	public:

		const static Error NoError = Error( 0, "No Error" );
		virtual String^ ToString( void ) override;

		property int Code {
			int get(void) { return code; }
		};
		property String^ Text {
			String^ get(void) { return text; }
		};
		static operator bool( Error cast ) {
			return cast.code != 0;
		}
	};


	public ref class Base64Api
	{
	private:
	
		static Error error;
		static bool  check( unsigned size );
		static bool  fail( void );

	public:

		static Base64Api();
		static void Init(bool init);

		generic<class T> where T : ValueType
		static String^   Encode( array<T>^ data );
		generic<class T> where T : ValueType
		static array<T>^ Decode( String^ data );

		static String^   EncodeString( String^ data );
		static String^   DecodeString( String^ data );

		static UInt32    EncodeFrame( UInt24 frame );
		static UInt24    DecodeFrame( UInt32 frame );
		
		static property Yps::Error Error {
			Yps::Error get(void) { return error; }
		}
	};

} //end of Yps

#endif

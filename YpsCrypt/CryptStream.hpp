/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      CryptStream.hpp                            ||
||     Author:    autogenerated                              ||
||     Generated: by Command Generator v.0.1                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _CryptStream_hpp_
#define _CryptStream_hpp_
#include "CryptHelper.hpp"

using namespace Stepflow;


namespace Yps {

    public ref class CryptStream 
        : public System::IO::Stream
    {
    public:
        
        [FlagsAttribute()]
        enum class Flags : unsigned {
            OpenRead=0x01,OpenWrite=0x02,Encrypt=0x04,Decrypt=0x08
        };

        CryptStream( CryptKey^ pass, String^ file, Flags mode );
        virtual ~CryptStream(void);

        // Inherited via Stream
        virtual property bool CanRead {
            bool get(void) override { return flags.HasFlag( Flags::OpenRead ); }
        };
        virtual property bool CanSeek {
            bool get(void) override { return false; };
        };
        virtual property bool CanWrite {
            bool get(void) override { return flags.HasFlag( Flags::OpenWrite ); };
        };
        virtual property long long Length {
            long long get(void) override;
        };
        virtual property long long Position {
            long long get(void) override;
            void set(long long) override;
        };
        virtual void Flush() override;
        virtual void Close() override;
        virtual int Read( array<byte>^ buffer, int offset, int count ) override;
        virtual long long Seek( long long offset, System::IO::SeekOrigin origin ) override;
        virtual void SetLength( long long value ) override;
        virtual void Write( array<byte>^ buffer, int offset, int count ) override;

    private:
        IntPtr yps;
        Flags flags;
    };

} //end of Yps
#endif

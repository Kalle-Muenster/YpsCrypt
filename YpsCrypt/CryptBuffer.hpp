/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      CryptBuffer.hpp                            ||
||     Author:    Autogenerated                              ||
||     Generated: 28.02.2022                                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _CryptBuffer_hpp_
#define _CryptBuffer_hpp_
#include "CryptHelper.hpp"

using namespace Stepflow;


namespace Yps
{
	public enum class CrypsFlags
		: unsigned char
	{
		Encrypt      = 0x01,
		Decrypt      = 0x02,
		InnerCryptic = 0x04,
		OuterCryptic = 0x08,
		Binary       = 0x10,
		Base64       = 0x40
	};

	ref class CryptKey;
	ref class Crypt;

	void ReleaseKey( CryptKey^ key );

	public ref class CryptBuffer
		: IDisposable
	{
	protected:

		bool     free;
		unsigned size;
		unsigned count;
		Type^    type;
		Object^  orig;
		IntPtr   data;
		
	internal:

		interior_ptr<Byte>       AsBytes( void );
		interior_ptr<UInt24>     AsBinary( void );
		interior_ptr<CryptFrame> AsFrames( void );

	public:

		generic<class T> where T : ValueType
		ref class Enumerator abstract
		{
		protected:

			int          start;
			int          stopt;
			int          position;
			IntPtr       current;
			
			Enumerator( CryptBuffer^ instance, int offset ) {
				start = offset;
				stopt = instance->GetElements() - start;
				current = instance->GetPointer();
				position = -1;
			}

		public:

			virtual bool MoveNext(void) {
				return ++position < stopt;
			}
			virtual void Reset(void) {
				position = -1;
			}
			property T Current {
				virtual T get(void) abstract;
				virtual void set(T value) abstract;
			}
			virtual ~Enumerator() {
				if (current == IntPtr::Zero) return;
				current = IntPtr::Zero;
				position = -1;
				stopt += start;
				start = 0;
			}
			property int Position {
				int get(void) { return position; }
				void set(int value) { position = value; }
			}
		};

		generic<class T,class C>
			where T : ValueType
			where C : ValueType
		ref class CrypticEnumerator abstract
		: public Enumerator<C>
		{

		protected:
			CryptKey^    key;
			CrypticEnumerator( CryptBuffer^ instance, CryptKey^ useKey, int offset )
				: Enumerator<C>(instance,offset) {
				key = useKey;
				start = offset;
				stopt = instance->GetElements() - start;
				position = -1;
			}

		public:
			virtual ~CrypticEnumerator() {
				ReleaseKey( key );
				if (current == IntPtr::Zero) return;
				current = IntPtr::Zero;
				position = -1;
				stopt += start;
				start = 0;
			}
			virtual void Reset( void ) override {
				position = -1;
				ReleaseKey( key );
			}
			CryptBuffer^ GetHeader() {
				return key->currentHdr();
			}
		};
		
		ref class Bytes1Enumerator
			: public CryptBuffer::Enumerator<Byte> {
		public:
			Bytes1Enumerator( CryptBuffer^ init, int oset )
			: Enumerator<Byte>( init, oset ) {
				current = IntPtr((Byte*)current.ToPointer() + oset);
				init->SetDataType( Byte::typeid );
			}

		public:
			property Byte Current {
				virtual Byte get(void) override {
					return *((Byte*)current.ToPointer() + position);
				}
				void set(Byte value) override {
					*((Byte*)current.ToPointer() + position) = value;
				}
			}
		};

		ref class UInt24Enumerator
			: public Enumerator<UInt24>	{
		public:
			UInt24Enumerator(CryptBuffer^ init,int oset)
			: Enumerator<UInt24>( init, oset ) {
				current = IntPtr((UInt24*)current.ToPointer() + oset);
				init->SetDataType( UInt24::typeid );
			}

		public:
			property UInt24 Current {
				virtual UInt24 get(void) override {
					return *( reinterpret_cast<UInt24*>(current.ToPointer()) + position );
				}
				virtual void set(UInt24 value) override {
					*( reinterpret_cast<UInt24*>(current.ToPointer()) + position ) = value;
				}
			}
		};

		ref class Base64Enumerator
			: public CryptBuffer::Enumerator<CryptFrame> {
		public:
			Base64Enumerator(CryptBuffer^ init, int oset)
			: Enumerator<CryptFrame>(init, oset) {
				current = IntPtr((CryptFrame*)current.ToPointer() + oset);
				init->SetDataType(CryptFrame::typeid);
			}

		public:
			property CryptFrame Current {
				virtual CryptFrame get(void) override {
					return *((CryptFrame*)current.ToPointer() + position);
				}
				virtual void set(CryptFrame value) override {
					*((CryptFrame*)current.ToPointer() + position) = value;
				}
			}
		};
		
		ref class InnerCrypticEnumerator
			: public CrypticEnumerator<UInt24,UInt24> {
		public:
			InnerCrypticEnumerator( CryptBuffer^ init, CryptKey^ use, int oset );

		public:
			property UInt24 Current {
				virtual UInt24 get(void) override;
				virtual void set(UInt24 value) override;
			}
		};

		ref class OuterCrypticEnumerator
			: public CrypticEnumerator<UInt24,UInt24> {
		public:
			IParser<UInt24>^ Search;

			OuterCrypticEnumerator( CryptBuffer^ init, CryptKey^ use, int oset );

			property UInt24 Current {
				virtual UInt24 get(void) override;
				virtual void set(UInt24 value) override;
			}

			virtual bool MoveNext( void ) override {
				if( Search != nullptr ) {
					if ( CrypticEnumerator<UInt24,UInt24>::MoveNext() ) {
						return !Search->Parse( Current );
					} else return false;
				} else return CrypticEnumerator<UInt24,UInt24>::MoveNext();
			}
		};

		ref class InnerCrypticStringEnumerator
			: public CrypticEnumerator<UInt24,CryptFrame>
		{
		private:
			CryptFrame frame;

		public:
			InnerCrypticStringEnumerator(CryptBuffer^ init, CryptKey^ use, int oset);

		public:
			property CryptFrame Current {
				virtual CryptFrame get( void ) override;
				virtual void set( CryptFrame ) override;
			}
		};

		ref class OuterCrypticStringEnumerator
			: public CrypticEnumerator<UInt32,UInt24>
		{
		public:
			IParser<UInt24>^ Search;

			OuterCrypticStringEnumerator(CryptBuffer^ init, CryptKey^ use, int oset);

			property UInt24 Current {
				virtual UInt24 get(void) override;
				virtual void set(UInt24 value) override;
			}

			virtual bool MoveNext(void) override {
				if( Search != nullptr ) {
					if( CrypticEnumerator<UInt32,UInt24>::MoveNext() ) {
						return !Search->Parse( Current );
					} else return false;
				} else return CrypticEnumerator<UInt32,UInt24>::MoveNext();
			}
		};

		CryptBuffer( void );
		CryptBuffer( int data_size );
		CryptBuffer( Array^ data_array );
		CryptBuffer( IntPtr data_pntr, int data_size );
		CryptBuffer( Type^ data_type, int array_length );
		~CryptBuffer();

		generic<class T> where T: ValueType
		void SetData( array<T>^ newBuffer );
		void SetData( IntPtr ptData, int cbData );

		Object^   GetData(void);
		generic<class T> where T : ValueType
        array<T>^ GetCopy(void);

		generic<class T> where T : ValueType
		virtual Enumerator<T>^ GetEnumerator();

		generic<class T> where T : ValueType
		virtual Enumerator<T>^ GetEnumerator( int offsetTs );

		generic<class T,class C> where T : ValueType where C : ValueType
		virtual CrypticEnumerator<T,C>^ GetCrypticEnumerator( CryptKey^ use, CrypsFlags Mode );

		generic<class T, class C> where T : ValueType where C : ValueType
		virtual CrypticEnumerator<T, C>^ GetCrypticEnumerator( CryptKey^ use, CrypsFlags Mode, int offsetCs );

		InnerCrypticEnumerator^ GetInnerCrypticEnumerator( CryptKey^ use, int offset );
		OuterCrypticEnumerator^ GetOuterCrypticEnumerator( CryptKey^ use, int offset );
		InnerCrypticStringEnumerator^ GetInnerCrypticStringEnumerator( CryptKey^ use, int offset );
		OuterCrypticStringEnumerator^ GetOuterCrypticStringEnumerator( CryptKey^ use, int offset );

		IntPtr GetPointer() {
			return data;
		}

		virtual String^ ToString() override;

		void SetDataType( Type^ set_type );

		Int64    ByteIndex;
		property Byte default[ Int64 ] {
			Byte get(Int64 idx) {
				return *(AsBytes() + idx);
			}
			void set(Int64 idx, Byte value) {
				*(AsBytes() + idx) = value;
			}
		}

		Int32    DataIndex;
		property UInt24 default[ Int32 ] {
			UInt24 get(Int32 idx) {
				return *(AsBinary() + idx);
			}
			void set(Int32 idx, UInt24 value) {
				*(AsBinary() + idx) = value;
			}
		}

		Int16    FrameIndex;
		property CryptFrame default[ Int16 ] {
			CryptFrame get(Int16 idx) {
				return *(AsFrames() + idx);
			}
			void set(Int16 idx, CryptFrame value) {
				*(AsFrames() + idx) = value;
			}
		}

		int GetDataSize() { return count * size; }
		int GetElements() { return count; }
		int GetTypeSize() { return size; }
		property Int64 Length {
			Int64 get(void) override { return GetElements(); }
		}
	};
} //end of Yps

#endif

/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      CryptStream.cpp                            ||
||     Author:    autogenerated                              ||
||     Generated: by Command Generator v.0.1                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#include <eszentielle/.CommandlinerTypes.h>
#include "YpsCryptApi.hpp"
#include "CryptStream.hpp"
#include <enumoperators.h>

Yps::Stream::Stream( CryptKey^ pass, Flags flags )
    : System::IO::Stream() {
    this->flags = flags;
    key = pass;
    bytes = 0;
    frame = gcnew array<byte>(3);
 }

Yps::FileStream::FileStream( CryptKey^ key, String^ file, Flags mode )
    : Yps::Stream( key, mode )
{
    if( !enum_utils::anyFlag( Flags::Decrypt|Flags::Encrypt, flags ) ) {
        if( enum_utils::hasFlag( flags, Flags::OpenWrite ) ) {
            flags = enum_utils::operator|(flags, Flags::Encrypt);
            flags = enum_utils::operator&(flags, ~Flags::OpenRead);
        } else {
            flags = enum_utils::operator|(flags, Flags::Decrypt|Flags::OpenRead);
        }
    } const char* mod = flags.HasFlag(Flags::OpenWrite) ? "wbe" : "rbd";
    yps = Crypt::createFileStream( key, file, *(uint*)mod );
}

slong
Yps::FileStream::Seek( slong offset, System::IO::SeekOrigin origin )
{
    throw gcnew System::Exception( "these cryptic streams cannot seek" );
}

void
Yps::FileStream::SetLength( slong value )
{
    throw gcnew System::Exception( "these cryptic streams cannot resize" );
}

bool
Yps::FileStream::CanSeek::get( void )
{
    return false;
};

/*///////////////////////////////////////////////////////////*\
||                                                           ||
||     File:      CryptStream.hpp                            ||
||     Author:    autogenerated                              ||
||     Generated: by Command Generator v.0.1                 ||
||                                                           ||
\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
#ifndef _CryptStream_hpp_
#define _CryptStream_hpp_


using namespace Stepflow;


namespace Yps {

    public ref class Stream abstract
        : public System::IO::Stream
    {
    public:
        [FlagsAttribute()]
        enum class Flags : unsigned {
            OpenRead = 0x01, OpenWrite = 0x02, Encrypt = 0x04, Decrypt = 0x08
        };

        Stream( Crypt^ ypse, CryptKey^ pass, Flags flags );

        virtual property bool CanRead {
            bool get(void) override { return flags.HasFlag( Flags::OpenRead ); }
        };
        virtual property bool CanWrite {
            bool get(void) override { return flags.HasFlag( Flags::OpenWrite ); }
        };

        virtual int SizeCheckedWrite( array<byte>^ buffer, int offset, int count ) abstract;
        virtual void PutFrame( UInt24 frame ) abstract;
        void PutFrame( ArraySegment<byte> frame );
        virtual UInt24 GetFrame( void ) abstract;

    protected:
        Crypt^       state;
        CryptKey^    crypt;
        Flags        flags;
        int          bytes;
        CryptFrame   frame;

        int  FillFrame( ArraySegment<byte> data );
        void LoadFrame( array<byte>^ data, int endo );
    };

    /// @brief Yps.FileStream - create a file for writing to it via System.IO.Stream Interface.
    /// Any data writen, will arive the file as binary data, encrypted by key used for opening
    /// the stream. Or: open an Yps.FileStream from an already cryptic file and directly read 
    /// file content as cleartext, non-cryptic data     
    public ref class FileStream
        : public Stream
    {
    public:

        FileStream( Crypt^ ypse, CryptKey^ pass, String^ path, Flags mode );

        virtual ~FileStream( void );

        virtual property bool CanSeek {
            bool get(void) override;
        };
        virtual property long long Length {
            long long get(void) override;
        };
        virtual property long long Position {
            long long get(void) override;
            void set(long long) override;
        };

        virtual void   Flush() override;
        virtual void   Close() override;
        virtual int    Read( array<byte>^ buffer, int offset, int count ) override;
        virtual slong  Seek( slong offset, System::IO::SeekOrigin origin ) override;
        virtual void   SetLength( slong value ) override;
        virtual void   Write( array<byte>^ buffer, int offset, int count ) override;
        virtual int    SizeCheckedWrite( array<byte>^ buffer, int offset, int count ) override;
        virtual void   PutFrame( UInt24 frame ) override;
        virtual UInt24 GetFrame( void ) override;

    private:

        static IntPtr crypticFopen( IntPtr state, CryptKey^ key, String^ nam, unsigned mod );
        IntPtr  file;
    };

    public ref class MemoryStream
        : public Stream
    {
    public:

        MemoryStream( Crypt^ ypse, CryptKey^ pass, CryptBuffer^ store, Flags mode );
        MemoryStream( Crypt^ ypse, CryptKey^ pass, uint size, Flags mode );

        virtual ~MemoryStream( void );

        virtual property bool CanSeek {
            bool get(void) override;
        };
        virtual property long long Length {
            long long get(void) override;
        };
        virtual property long long Position {
            long long get(void) override;
            void set(long long) override;
        };

        virtual void   Flush( void ) override {};
        virtual void   Close( void ) override;
        virtual int    Read( array<byte>^ buffer, int offset, int count ) override;
        virtual slong  Seek( slong offset, System::IO::SeekOrigin origin ) override;
        virtual void   SetLength( slong value ) override;
        virtual void   Write( array<byte>^ buffer, int offset, int count ) override;
        virtual int    SizeCheckedWrite( array<byte>^ buffer, int offset, int count ) override;
        virtual void   PutFrame( UInt24 frame ) override;
        virtual UInt24 GetFrame( void ) override;

        array<byte>^   GetBuffer();
        void           SetBuffer( array<byte>^ setBuffer );

    private:

        CryptBuffer::CrypticEnumerator<UInt24,UInt24>^ stream;
        CryptBuffer^                                   buffer;

        void openStream( Crypt^ apistate, CryptKey^ pass );
    };

} //end of Yps
#endif
